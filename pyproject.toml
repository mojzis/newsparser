[tool.poetry]
name = "newsparser"
version = "0.1.0"
description = "Parse bluesky posts."
authors = ["Your Name <you@example.com>"]
license = "MIT"
# readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
pydantic = ">=2.5.0"
pydantic-settings = ">=2.1.0"
boto3 = ">=1.34.0"
pandas = ">=2.1.0"
pyarrow = ">=14.0.0"
atproto = ">=0.0.54"
click = ">=8.0.0"
rich = ">=13.7.0"
pyyaml = ">=6.0.0"
httpx = ">=0.25.0"
beautifulsoup4 = ">=4.12.0"
readability-lxml = ">=0.8.1"
html2text = ">=2020.1.16"
nest-asyncio = ">=1.6.0"
anthropic = "^0.54.0"
jinja2 = "^3.1.6"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.4.0"
pytest-asyncio = ">=0.21.0"
pytest-mock = ">=3.12.0"
pytest-cov = ">=4.1.0"
moto = ">=4.2.0"
hypothesis = ">=6.92.0"
ruff = ">=0.8.0"
ty = "0.0.1-alpha.9"
marimo = ">=0.10.0"

[tool.poetry.scripts]
nsp = "src.cli.commands:cli"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C40",  # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff-specific rules
]

ignore = [
    "ANN401",  # any-type
    "COM812",  # missing-trailing-comma (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
    "S101",    # assert
    "S106",    # hardcoded-password-argument (test fixtures)
    "TD002",   # missing-todo-author
    "TD003",   # missing-todo-link
    "FIX002",  # line-contains-todo
    "TRY003",  # raise-vanilla-args (too strict for simple validation)
    "EM101",   # raw-string-in-exception (too strict for simple validation)
    "EM102",   # f-string-in-exception (too strict for simple validation)
    "PLR2004", # magic-value-comparison (too strict for date constants)
    "DTZ001",  # call-datetime-without-tzinfo (tests use naive datetime)
    "SLF001",  # private-member-access (needed for testing formatter internals)
    "N805",    # invalid-first-argument-name-for-class-method (pydantic validators use cls)
    "RUF012",  # mutable-class-default (pydantic config pattern)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "S101",    # assert
    "ANN",     # type annotations
    "ARG",     # unused arguments
    "PLR2004", # magic value comparison
]

[tool.ty]
# ty configuration for type checking (part of ruff ecosystem)
